@model Project.Service.PaginatedList<VehicleMakeViewModel>

@{
    ViewData["Title"] = "Index";
    var newSortOrder = (string)ViewData["SortOrder"] == "asc" ? "desc" : "asc";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>

<form asp-action="Index" method="get">
    <div class="form-actions no-color">
        <p>
            <input type="hidden" name="sortOrder" value="@ViewData["SortOrder"]" />
            <input type="hidden" name="sortBy" value="@ViewData["SortBy"]" />
            Find by name: <input type="text" name="searchString" value="@ViewData["CurrentFilter"]" />
            <input type="submit" value="Search" class="btn btn-primary" /> |
            <a asp-action="Index">Back to Full List</a>
        </p>
    </div>
</form>

<table class="table">
    <thead>
        <tr>
            <th class="col1">
                <a asp-action="Index" asp-route-sortOrder="@newSortOrder" asp-route-sortBy="Name" asp-route-currentFilter="@ViewData["CurrentFilter"]">Name</a>
            </th>
            <th class="col2">
                <a asp-action="Index" asp-route-sortOrder="@newSortOrder" asp-route-sortBy="Abbreviation" asp-route-currentFilter="@ViewData["CurrentFilter"]">Abbreviation</a>
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Abbreviation)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.VehicleMakeId">Edit</a> |
                    <a asp-action="Details" asp-route-id="@item.VehicleMakeId">Details</a> |
                    <a asp-action="Delete" asp-route-id="@item.VehicleMakeId">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>

@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<a asp-action="Index"
   asp-route-sortOrder="@ViewData["SortOrder"]"
   asp-route-sortBy="@ViewData["SortBy"]"
   asp-route-pageNumber="@(Model.PageIndex - 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @prevDisabled">
    Previous
</a>
<a asp-action="Index"
   asp-route-sortOrder="@ViewData["SortOrder"]"
   asp-route-sortBy="@ViewData["SortBy"]"
   asp-route-pageNumber="@(Model.PageIndex + 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @nextDisabled">
    Next
</a>
